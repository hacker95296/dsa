Problem Statement 
âž–
 There are flight paths between cities. If there is a flight between 
city A and city B then there is an edge between the cities. The cost of the edge can be 
the time that flight takes to reach city B from A, or the amount of fuel used for the 
journey. Represent this as a graph. The node can be represented by airport name or 
name of the city. Use adjacency list representation of the graph or use adjacency matrix 
representation of the graph.Check whether the graph is connected or not. Justify the 
storage representation used. 
INPUT :- 
#include<iostream> 
#include<iomanip> 
#include<string> 
#include<vector> 
using namespace std; 
void dfs(int node, vector<vector<int>>& adjMatrix, vector<bool>& visited, int v) { 
visited[node] = true; 
for(int i = 0; i < v; i++) { 
if(adjMatrix[node][i] != 0 && !visited[i]) { 
dfs(i, adjMatrix, visited, v); 
} 
} 
} 
int main() { 
int v, w; 
cout << "Enter total number of cities: "; 
cin >> v; 
cin.ignore(); 
string brr[v]; 
vector<vector<int>> arr(v, vector<int>(v, 0)); 
cout << "Enter city names:\n"; 
for(int i = 0; i < v; i++) { 
cout << "Enter city: "; 
getline(cin, brr[i]); 
} 
for(int i = 0; i < v; i++) { 
for(int j = i+1; j < v; j++) { 
cout << "Enter 0 if no path, else enter path cost between " << brr[i] << " and " << brr[j] 
<< ": "; 
cin >> w; 
if(w != 0) { 
arr[i][j] = arr[j][i] = w; 
} 
} 
} 
cout << "Adjacency Matrix:\n"; 
cout << setw(10) << " "; 
for(int i = 0; i < v; i++) { 
cout << setw(10) << brr[i]; 
} 
cout << endl;for(int i = 0; i < v; i++) { 
cout << setw(10) << brr[i]; 
for(int j = 0; j < v; j++) { 
cout << setw(10) << arr[i][j]; 
} 
cout << endl; 
} 
vector<bool> visited(v, false); 
dfs(0, arr, visited, v); 
bool isConnected = true; 
for(bool visit : visited) { 
if(!visit) { 
isConnected = false; 
break; 
} 
} 
if(isConnected) { 
cout << "The graph is connected.\n"; 
} else { 
cout << "The graph is NOT connected.\n"; 
} 
return 0; 
} 
 
OUTPUT :- 
 
Enter total number of cities: 4 
Enter city names: 
Enter city: Pune 
Enter city: Mumbai 
Enter city: Dehli 
Enter city: Goa 
Enter 0 if no path, else enter path cost between Pune and Mumbai: 32 
Enter 0 if no path, else enter path cost between Pune and Dehli: 54 
Enter 0 if no path, else enter path cost between Pune and Goa: 65 
Enter 0 if no path, else enter path cost between Mumbai and Dehli: 12 
Enter 0 if no path, else enter path cost between Mumbai and Goa: 0 
Enter 0 if no path, else enter path cost between Dehli and Goa: 54 
Adjacency Matrix: 
                Pune    Mumbai     Dehli       Goa 
      Pune         0        32        54        65 
    Mumbai        32         0        12         0 
     Dehli        54        12         0        54 
       Goa        65         0        54         0 
The graph is connected.
