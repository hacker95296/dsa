#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string word;
    string meaning;
    Node* left;
    Node* right;

    Node(string w, string m) {
        word = w;
        meaning = m;
        left = right = nullptr;
    }
};

class Dictionary {
public:
    Node* root;

    Dictionary() {
        root = nullptr;
    }

    Node* insert(Node* root, string word, string meaning) {
        if (root == nullptr)
            root= new Node(word, meaning);
            return root;
        if (word < root->word)
            root->left = insert(root->left, word, meaning);
        else if (word > root->word)
            root->right = insert(root->right, word, meaning);
        return root;
    }

    void create() {
        string word, meaning;
        cout << "Enter keyword: ";
        cin >> word;
        cin.ignore(); 
        cout << "Enter meaning: ";
        getline(cin, meaning);
        root = insert(root, word, meaning);
    }

    void inorder(Node* root) {
        if (root) {
            inorder(root->left);
            cout << root->word << " : " << root->meaning << endl;
            inorder(root->right);
        }
    }

    void descending(Node* root) {
        if (root) {
            descending(root->right);
            cout << root->word << " : " << root->meaning << endl;
            descending(root->left);
        }
    }

    void search(Node* root, string key) {
        if (!root) {
            cout << "Keyword not found." << endl;
            return;
        }
    
        if (key == root->word) {
            cout << "Keyword found!" << endl;
            cout << "Word: " << root->word << endl;
            cout << "Meaning: " << root->meaning << endl;
        }
        else if (key < root->word) {
            search(root->left, key);
        }
        else {
            search(root->right, key);
        }
    }
    

    void modify(Node* root, string key) {
        if (root == nullptr) {
            cout << "Keyword not found.\n";
            return;
        }
    
        if (key == root->word) {
            cout << "Current meaning: " << root->meaning << endl;
            cout << "Enter new meaning: ";
            cin.ignore();
            getline(cin, root->meaning);
            cout << "Meaning updated successfully.\n";
        }
        else if (key < root->word) {
            modify(root->left, key);
        }
        else {
            modify(root->right, key);
        }
    }
    

    Node* minValue(Node* root) {
        while (root && root->left != nullptr)
            root = root->left;
        return root;
    }

    Node* deleteNode(Node* root, string key) {
        if (root == nullptr) return root;

        if (key < root->word)
            root->left = deleteNode(root->left, key);
        else if (key > root->word)
            root->right = deleteNode(root->right, key);
        else {
            if (root->left == nullptr) {
                Node* temp = root->right;
                delete root;
                return temp;
            }
            else if (root->right == nullptr) {
                Node* temp = root->left;
                delete root;
                return temp;
            }
            Node* temp = minValue(root->right);
            root->word = temp->word;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->word);
        }
        return root;
    }

};

int main() {
    Dictionary dict;
    int choice;
    bool flag=true;
    string key;

    
    while(flag){

        cout << "\n----- Dictionary Menu -----\n";
        cout << "1. Add Keyword\n";
        cout << "2. Display in Ascending Order\n";
        cout << "3. Display in Descending Order\n";
        cout << "4. Search for a Keyword\n";
        cout << "5. Modify Meaning\n";
        cout << "6. Delete a Keyword\n";
        cout << "7. Show Max Comparisons (Height)\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            dict.create();
            break;
        case 2:
            cout << "Dictionary in Ascending Order:\n";
            dict.inorder(dict.root);
            break;
        case 3:
            cout << "Dictionary in Descending Order:\n";
            dict.descending(dict.root);
            break;

        case 4:
            cout << "Enter keyword to search: ";
            cin >> key;
            dict.search(dict.root, key);
            break;

        case 5:
            cout << "Enter keyword to modify: ";
            cin >> key;
            dict.modify(dict.root, key);
            break;

        case 6:
            cout << "Enter keyword to delete: ";
            cin >> key;
            dict.root = dict.deleteNode(dict.root, key);
            break;

        case 7:
            cout << "Exiting...\n";
            flag=false;
            break;
        default:
            cout << "Invalid choice. Try again.\n";
        }
    } 

    return 0;
}
